# 1012 : [기초-입출력] 실수 1개 입력받아 그대로 출력하기
x = float(input())   # 입력값 : 1.54
print('%f'%x)        # 출력값 : 1.540000
# print(x)           # 출력값 : 1.54

"""
### 서식 지정자 (format specifier) : 특정 자료형을 표현하는 방법

# '%s'% : 문자열 자료형 <- String
# '%d'% : 정수 자료형   <- Decimal Integer
# '%f'% : 실수 자료형   <- Floating Point(부동 소수점)를 Fixed Point(고정 소수점)로 표현
                         (1) 기본적으로 소수점 이하 6자리까지 표시
                         (2) '%.자릿수f'% : 소수점 자릿수 변경 - %f 사이에 .자릿수 지정\

# 정렬하기             <- 서식지정자의 %와 서식 지정 문자(s,d,f) 사이에 길이(숫자) 넣기
                         오른쪽 정렬 (+) / 왼쪽 정렬 (-)
                         
# 여러 개의 값 표현하기  <- ex) '%d는 정수, %f는 실수, 그리고 %s는 문자열입니다.'%(1, 1.1, 'hello)
"""

"""
### 문자열 포매팅 (String Formatting)    cf) 참고 : https://null-0.tistory.com/23                                                 
                                   
# 방법 1) 전통적인 파이썬 문자열 포매팅   -> 서식 지정자 (format specifier)
- 사용 방법 : 문자열 내에 각 자료형에 매치되는 서식 지정자(%d, %f, %s)를 입력하고,
            문자열이 끝난 이후 % 뒤에 각 서식 지정자에 매치되는 데이터 넣어주기       

# 방법 2) format() 사용한 문자열 포매팅 -> format() 함수
- 사용 방법 : 문자열 내의 중괄호({}) 안에 치환할 데이터의 인덱스를 지정하고,
            문자열 이후에 format() 함수를 이용해 데이터의 값 넣어주기
  -> 서식 지정자를 이용하는 방식보다 더 간단한 방법 !

# 방법 3) f 문자열 포매팅              -> f-string 문법
- 사용 방법 : 문자열 앞에 포매티을 의미하는 접두사 'f' 붙여주기
            단순히 중괄호({}) 안에 출력하고자 하는 값이나 변수를 넣을 수 있음
            (자료형의 변환 없이도 간단히 문자열과 정수를 함께 넣을 수 있음)
  -> 서식 지정자를 사용할 필요 없이 보다 더 편하게 사용 가능한 방법 !! 
     (단, Python 3.6 이상 버전부터)
"""




